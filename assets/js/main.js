// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
const TELEGRAM_CONFIG = {
    botToken: 'YOUR_BOT_TOKEN', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    chatId: 'YOUR_CHAT_ID',     // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
    apiUrl: 'https://api.telegram.org/bot'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendToTelegram(message) {
    try {
        const response = await fetch(`${TELEGRAM_CONFIG.apiUrl}${TELEGRAM_CONFIG.botToken}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: TELEGRAM_CONFIG.chatId,
                text: message,
                parse_mode: 'HTML'
            })
        });
        
        const result = await response.json();
        
        if (result.ok) {
            console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
            return true;
        } else {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', result);
            return false;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function formatTelegramMessage(formData, formType) {
    const timestamp = new Date().toLocaleString('ru-RU');
    const emoji = formType === 'consultation' ? 'üìû' : 'üìù';
    const title = formType === 'consultation' ? '–ó–ê–Ø–í–ö–ê –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ' : '–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê';
    
    let message = `${emoji} <b>${title}</b>\n\n`;
    message += `üìÖ <b>–î–∞—Ç–∞:</b> ${timestamp}\n`;
    message += `üë§ <b>–ò–º—è:</b> ${formData.name}\n`;
    message += `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formData.phone}\n`;
    
    if (formData.preferredContact) {
        message += `üí¨ <b>–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</b> ${formData.preferredContact}\n`;
    }
    
    if (formData.service) {
        message += `üîß <b>–£—Å–ª—É–≥–∞:</b> ${formData.service}\n`;
    }
    
    if (formData.message) {
        message += `üí≠ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${formData.message}\n`;
    }
    
    message += `\nüåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –°–∞–π—Ç vodniymir-kem.ru`;
    
    return message;
}

document.addEventListener('DOMContentLoaded', function() {
    // Mobile menu toggle
    document.getElementById('menu-toggle').addEventListener('click', function() {
        document.getElementById('mobile-menu').classList.toggle('hidden');
    });
    
    // Before/After slider functionality
    const sliders = document.querySelectorAll('.slider');
    sliders.forEach(slider => {
        slider.addEventListener('input', function() {
            const sliderValue = this.value;
            const sliderContainer = this.parentElement;
            const beforeImage = sliderContainer.querySelector('.before-after-slider');
            beforeImage.style.width = `${sliderValue}%`;
        });
    });
    
    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Å—Å—ã–ª–æ–∫ –±–µ–∑ —Ö—ç—à–∞
            if (this.getAttribute('href') === '#') return;
            
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º –≤—ã—Å–æ—Ç—ã —à–∞–ø–∫–∏
                const headerHeight = document.querySelector('nav').offsetHeight;
                const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset - headerHeight;
                
                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
                
                // Close mobile menu if open
                if (!document.getElementById('mobile-menu').classList.contains('hidden')) {
                    document.getElementById('mobile-menu').classList.add('hidden');
                }
            }
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    document.getElementById('consultation-form')?.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const checkbox = document.getElementById('consultation-privacy-consent');
        if (!checkbox?.checked) {
            checkbox?.focus();
            checkbox?.parentElement.classList.add('animate-pulse');
            setTimeout(() => checkbox?.parentElement.classList.remove('animate-pulse'), 1000);
            return;
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const formData = {
            name: this.querySelector('input[type="text"]').value,
            phone: this.querySelector('input[type="tel"]').value,
            preferredContact: this.querySelector('button.bg-blue-500')?.textContent || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        };
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        const message = formatTelegramMessage(formData, 'consultation');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
        submitBtn.disabled = true;
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            const success = await sendToTelegram(message);
            
            if (success) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                submitBtn.innerHTML = '<i class="fas fa-check mr-2"></i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!';
                submitBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
                submitBtn.classList.add('bg-green-600');
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                this.reset();
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    submitBtn.innerHTML = originalText;
                    submitBtn.classList.remove('bg-green-600');
                    submitBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');
                    submitBtn.disabled = false;
                }, 3000);
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
            }
        } catch (error) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            submitBtn.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>–û—à–∏–±–∫–∞';
            submitBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
            submitBtn.classList.add('bg-red-600');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                submitBtn.innerHTML = originalText;
                submitBtn.classList.remove('bg-red-600');
                submitBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');
                submitBtn.disabled = false;
            }, 3000);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    document.getElementById('contact-form')?.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const checkbox = document.getElementById('contact-privacy-consent');
        if (!checkbox?.checked) {
            checkbox?.focus();
            checkbox?.parentElement.classList.add('animate-pulse');
            setTimeout(() => checkbox?.parentElement.classList.remove('animate-pulse'), 1000);
            return;
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const formData = {
            name: this.querySelector('#name').value,
            phone: this.querySelector('#phone').value,
            service: this.querySelector('#service').value,
            message: this.querySelector('#message').value
        };
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        const message = formatTelegramMessage(formData, 'contact');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
        submitBtn.disabled = true;
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            const success = await sendToTelegram(message);
            
            if (success) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                submitBtn.innerHTML = '<i class="fas fa-check mr-2"></i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!';
                submitBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
                submitBtn.classList.add('bg-green-600');
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                this.reset();
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    submitBtn.innerHTML = originalText;
                    submitBtn.classList.remove('bg-green-600');
                    submitBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');
                    submitBtn.disabled = false;
                }, 3000);
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
            }
        } catch (error) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            submitBtn.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>–û—à–∏–±–∫–∞';
            submitBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
            submitBtn.classList.add('bg-red-600');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                submitBtn.innerHTML = originalText;
                submitBtn.classList.remove('bg-red-600');
                submitBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');
                submitBtn.disabled = false;
            }, 3000);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
    document.querySelectorAll('#consultation-form button[type="button"]').forEach(button => {
        button.addEventListener('click', function() {
            // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            document.querySelectorAll('#consultation-form button[type="button"]').forEach(btn => {
                btn.classList.remove('bg-blue-500', 'text-white');
                btn.classList.add('bg-gray-100', 'text-gray-800');
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ
            this.classList.remove('bg-gray-100', 'text-gray-800');
            this.classList.add('bg-blue-500', 'text-white');
        });
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const consultationButtons = document.querySelectorAll('#consultation-form button[type="button"]');
    if (consultationButtons.length > 0) {
        consultationButtons[0].click();
    }
    
    // Initialize Yandex Map
    if (typeof ymaps !== 'undefined') {
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ö–µ–º–µ—Ä–æ–≤–æ (—Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã)
        const kemerovo = [55.354968, 86.087314];
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
        ymaps.ready(init);
        
        function init() {
            const map = new ymaps.Map("yandex-map", {
                center: kemerovo,
                zoom: 9,
                controls: ['zoomControl']
            });
            
            // –°—Ç–∏–ª—å –∫–∞—Ä—Ç—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å: dark, light, etc)
            map.options.set('suppressMapOpenBlock', true);
            
            // –ö—Ä—É–≥ –∑–æ–Ω—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (150 –∫–º)
            const serviceArea = new ymaps.Circle([
                kemerovo,
                150000 // —Ä–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö
            ], {
                fillColor: "#3b82f680",
                strokeColor: "#1e40af",
                strokeOpacity: 0.8,
                strokeWidth: 2
            });
            
            map.geoObjects.add(serviceArea);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
            const cities = [
                { name: "–ö–µ–º–µ—Ä–æ–≤–æ", coords: [55.363166, 86.072868], color: "#1e40af" },
                { name: "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫", coords: [53.757572, 87.136093], color: "#3b82f6" },
                { name: "–ü—Ä–æ–∫–æ–ø—å–µ–≤—Å–∫", coords: [53.895355, 86.744657], color: "#3b82f6" },
                { name: "–ú–µ–∂–¥—É—Ä–µ—á–µ–Ω—Å–∫", coords: [53.693575, 88.065342], color: "#3b82f6" },
                { name: "–õ–µ–Ω–∏–Ω—Å–∫-–ö—É–∑–Ω–µ—Ü–∫–∏–π", coords: [54.660361, 86.169937], color: "#3b82f6" },
                { name: "–Æ—Ä–≥–∞", coords: [55.723125, 84.886174], color: "#3b82f6" },
                { name: "–ë–µ–ª–æ–≤–æ", coords: [54.422678, 86.297878], color: "#3b82f6" },
                { name: "–ê–Ω–∂–µ—Ä–æ-–°—É–¥–∂–µ–Ω—Å–∫", coords: [56.081944, 86.027500], color: "#3b82f6" }
            ];
            
            cities.forEach(city => {
                const placemark = new ymaps.Placemark(city.coords, {
                    hintContent: city.name,
                    balloonContent: `<b>${city.name}</b>`
                }, {
                    preset: city.name === "–ö–µ–º–µ—Ä–æ–≤–æ" 
                        ? 'islands#blueCircleDotIcon' 
                        : 'islands#blueCircleIcon',
                    iconColor: city.color
                });
                
                map.geoObjects.add(placemark);
            });
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø–æ –∑–æ–Ω–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            map.setBounds(serviceArea.geometry.getBounds());
        }
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    const observerOptions = {
        threshold: 0.1
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate-fade-in-up');
                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    document.querySelectorAll('.animate-fade-in-up').forEach(el => {
        observer.observe(el);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å–ª—É–≥
    const serviceCards = document.querySelectorAll('.service-card');

    function toggleCard(card) {
        const details = card.querySelector('.service-details');
        const btn = card.querySelector('.toggle-details-btn');
        const icon = btn?.querySelector('i');
        const label = btn?.querySelector('span');

        const isOpen = card.classList.toggle('active');

        if (isOpen) {
            details.style.maxHeight = details.scrollHeight + 'px';
            label.textContent = "–°–∫—Ä—ã—Ç—å";
            icon?.classList.remove('fa-chevron-down');
            icon?.classList.add('fa-chevron-up');
        } else {
            details.style.maxHeight = '0';
            label.textContent = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ";
            icon?.classList.remove('fa-chevron-up');
            icon?.classList.add('fa-chevron-down');
        }
    }

    serviceCards.forEach(card => {
        const btn = card.querySelector('.toggle-details-btn');
        const details = card.querySelector('.service-details');

        if (!btn || !details) return;

        btn.addEventListener('click', function (e) {
            e.preventDefault();
            e.stopPropagation();

            // –ó–∞–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            serviceCards.forEach(other => {
                if (other !== card && other.classList.contains('active')) {
                    other.classList.remove('active');
                    const otherDetails = other.querySelector('.service-details');
                    const otherBtn = other.querySelector('.toggle-details-btn');
                    const otherIcon = otherBtn?.querySelector('i');
                    const otherLabel = otherBtn?.querySelector('span');

                    otherDetails.style.maxHeight = '0';
                    if (otherLabel) otherLabel.textContent = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ";
                    if (otherIcon) {
                        otherIcon.classList.remove('fa-chevron-up');
                        otherIcon.classList.add('fa-chevron-down');
                    }
                }
            });

            toggleCard(card);
        });
    });

    // –ê–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        function handleMobileView() {
            const isMobile = window.innerWidth <= 768;

            serviceCards.forEach(card => {
                const details = card.querySelector('.service-details');
                const toggleBtn = card.querySelector('.toggle-details-btn');

                if (!details || !toggleBtn) return;

                if (isMobile) {
                    card.classList.add('active');
                    details.style.maxHeight = 'none';
                    toggleBtn.style.display = 'none';
                } else {
                    card.classList.remove('active');
                    details.style.maxHeight = '0';
                    toggleBtn.style.display = 'flex';
                    const label = toggleBtn.querySelector('span');
                    const icon = toggleBtn.querySelector('i');
                    if (label) label.textContent = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ";
                    if (icon) {
                        icon.classList.remove('fa-chevron-up');
                        icon.classList.add('fa-chevron-down');
                    }
                }
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        handleMobileView();
        window.addEventListener('resize', handleMobileView);
    });